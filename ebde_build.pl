#! /usr/bin/perl -w

use English;
use strict;

use File::Basename;

my $cwd       = $ENV{PWD} || `pwd`;
chomp $cwd;

# A list of projects that must go into $BDE_PATH
my @projects = qw(tools bsl bde);

# Default directories for each project
my %projectDirs = (
    tools => "/bbcm/bde-tools",
    bsl   => "/bbcm/bsl-internal",
    bde   => "/bbcm/bde-core"
);

# File or directory used to detect what project current directory belongs to
my %projectLandmarks = (
    tools => "bin/bde_build.pl",
    bsl   => "groups/bsl",
    bde   => "groups/bde"
);

# Walk up the directory tree until we figure out what project we're in.  If
# the current directory is not in one of the known projects, then $BDE_PATH
# will be set to its default value.

for (my $projectRoot = $cwd;
     $projectRoot ne "/" && $projectRoot ne "";
     $projectRoot =~ s(/[^/]*$ )()xo ) {
    for my $project (@projects) {
        if ( -e "$projectRoot/".$projectLandmarks{$project} ) {
            # Found what project we're in.  Set that project's directory to
            # $projectRoot
            $projectDirs{$project} = $projectRoot;
            print "Project root is $projectRoot\n";
            last;
        }
    }
}

# Construct $BDE_PATH from the project directories
my $BDE_PATH = "";
for my $project (@projects) {
    $BDE_PATH .= ':' unless ("" eq $BDE_PATH);
    $BDE_PATH .= $projectDirs{$project};
}
$ENV{BDE_PATH} = $BDE_PATH;
print "BDE_PATH=$BDE_PATH\n";

# my $tooldir = dirname `which bde_build.pl`;
# $tooldir = "$buildroot/tools/bin" if ($tooldir eq ".");
my $tooldir = $projectDirs{tools}."/bin";

$ENV{BDE_ROOT} = $projectDirs{bde};
print "BDE_ROOT=$projectDirs{bde}\n";

#my $uplid=`$tooldir/bde_uplid.pl`;
my $uplid;
my $target;

$, = " ";
my $HOME=$ENV{HOME};
my $xtraArgs = " -DCP=smartcp.pl";
#$xtraArgs .= " -o $HOME/bs/bde_build" unless ($buildroot =~ /snapshot-view/);
$xtraArgs .= " -DALLTEST_PARALLEL=-s" if (grep /^-(s|j1)/, @ARGV);
#$xtraArgs .= " -tdbg_exc_mt_64" unless (grep /^-t/, @ARGV);
my $linux = `uname` =~ /Linux/ ? 1 : 0;
my $remoter = $linux ? "" : "locum";
my $compiler = "gcc-4.8.2";
my $compilerpath = "/usr/bin";
my $buildcmd = "$remoter time $tooldir/bde_build.pl -c $compiler ".
    "-DCOMPILERPATH=$compilerpath @ARGV$xtraArgs";
delete $ENV{PREBUILT_LIBS} if ($buildcmd =~ / -t[^-]*64/);
delete $ENV{PREBUILT_LIBS} if ($linux);
print STDERR "$buildcmd\n";
open BUILD, "$buildcmd 2>&1 |"
    or die "Cannot run command $tooldir/bde_build.pl\n";

while (defined (my $buildline = <BUILD>))
{
    next if $buildline =~ /warning: 'RCS[iI]d_.*' defined but not used/ ;
    if ($buildline =~ /bde_build.pl: -- Building for: (.*)$/ ) {
	$uplid = $1;
	print "uplid is $uplid\n";
	next;
    }
    if ($buildline =~ /bde_build.pl: -- Build type: (.*)$/ ) {
	$target = $1;
	print "target is $target\n";
	next;
    }

    # Skip include files generated by smartcp.pl    
    next if ($buildline =~ m{/unix-Linux-[^/]+/[a-zA-Z0-9_.]*:1:}xo);

    # Fix column 0 -- emacs doesn't handle it right
    $buildline =~ s{:1:0:}{:1:1:};

    $buildline =~ s{^(all\.pl:\s*<<\s*[^        ].*),\tError\s*}{$1\n}xio;
    $buildline =~ s{^all\.pl:\s*<<\s*Error\s*}{}xio;
    $buildline =~ s{/bb/bigstor17/dev-phalpern-snapshot}{~/snapshot-view}xio;
    if ($buildline =~ /^Use of uninitialized value /) {
        # Prevent emacs from matching / at <filename> line <#> / as an error.
        $buildline =~ s/ at / in /;
    }
    elsif ($buildline =~ m{line\s+\d+:}xio or
	   $buildline =~ m{^.*/groups/.*[a-z]:}xio ) {
        $buildline =~ s{^(.*/groups/[^:]*)/include/$uplid(/$target)?/}{$1/}xio;
        $buildline =~ s{^(.*/groups/[^:]*)/$uplid(/$target)?/}{$1/}xio;
    }
    elsif ($buildline =~ m{.*/groups/.*\([0-9]+\):}xio ){
#        $buildline =~ s{:}{: Error:}xio;
        $buildline =~ s{^(.*/groups/[^:]*)/include/$uplid(/$target)?/}{$1/}xio;
        $buildline =~ s{^(.*/groups/[^:]*)/$uplid(/$target)?/}{$1/}xio;
    }
    print STDERR $buildline;
}

close BUILD;    # Sets $? to exit status
exit $? >> 8;
